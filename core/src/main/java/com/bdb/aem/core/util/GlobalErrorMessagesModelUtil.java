package com.bdb.aem.core.util;

import com.bdb.aem.core.models.GlobalErrorMessagesModel;
import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Iterator;

public class GlobalErrorMessagesModelUtil {

    protected static final Logger log = LoggerFactory.getLogger(GlobalErrorMessagesModelUtil.class);


    /**
     * @param pagePath         - the path to the data page
     * @param resourceResolver - resource resolver object
     * @param resourceType     - the resource type
     * @return the list of GlobalErrorMessagesModel Models from the data page
     */
    public static GlobalErrorMessagesModel getErrorMessageModel(String pagePath, ResourceResolver resourceResolver, String resourceType) {

        if (null != pagePath && null != resourceResolver) {

            String componentNode = getComponentNode(pagePath, resourceResolver, resourceType);

            if (StringUtils.isNotEmpty(componentNode)) {
                Resource modelResource = resourceResolver.getResource(componentNode);
                if (modelResource != null) {
                    GlobalErrorMessagesModel errorModel = modelResource.adaptTo(GlobalErrorMessagesModel.class);
                    return errorModel;
                }
            }
        }

        return null;
    }

    /**
     * @param pagePath         - the path to the data page
     * @param resourceResolver - resource resolver object
     * @param resourceType     - resource type
     * @return the path to the component node on the page.
     * @throws NullPointerException generated by listChildren method invocation
     */

    public static String getComponentNode(String pagePath, ResourceResolver resourceResolver, String resourceType) {
        log.debug("entering getComponentNode method ");
        String nodePath = StringUtils.EMPTY;
        if (StringUtils.isNotEmpty(pagePath) && null != resourceResolver) {
            Resource pageContentResource = resourceResolver.getResource(pagePath.concat(CommonConstants.JCR_ROOT));
            if (pageContentResource != null) {
                Iterator<Resource> children = pageContentResource.listChildren();
                while (children.hasNext()) {
                    Resource child = children.next();
                    if (child.isResourceType(resourceType)) {
                        nodePath = child.getPath();
                        break;
                    }
                }
            }
        }
        return nodePath;

    }


}
