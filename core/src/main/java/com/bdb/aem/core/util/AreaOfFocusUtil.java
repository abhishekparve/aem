package com.bdb.aem.core.util;

import com.bdb.aem.core.pojo.IndustryRoleInterestModelConfig;
import com.bdb.aem.core.pojo.Payload;
import com.bdb.aem.core.pojo.PayloadConfig;
import com.bdb.aem.core.services.BDBApiEndpointService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import com.bdb.aem.core.models.AreaOfFocusModel;
import org.apache.sling.api.servlets.HttpConstants;

import java.util.Iterator;

/**
 * The Class AreaOfFocusUtil.
 */
public class AreaOfFocusUtil {

	/** The Constant JCR_ROOT. */
	protected static final String JCR_ROOT = "/jcr:content/root";

	/**
	 * Gets the area of focus model.
	 *
	 * @param pagePath         - the path to the data pages
	 * @param resourceResolver - resource resolver object
	 * @param resourceType     - the resource type
	 * @return returns Area of Focus Model
	 */
	public static AreaOfFocusModel getAreaOfFocusModel(String pagePath, ResourceResolver resourceResolver,
			String resourceType) {

		if (null != pagePath && null != resourceResolver) {
			String componentNode = getComponentNode(pagePath, resourceResolver, resourceType);

			if (StringUtils.isNotEmpty(componentNode)) {

				Resource modelResource = resourceResolver.getResource(componentNode);
				if (modelResource != null) {
					AreaOfFocusModel aofModel = modelResource.adaptTo(AreaOfFocusModel.class);
					if (aofModel != null) {
						return aofModel;
					}
				}
			}
		}
		return null;
	}

	/**
	 * Gets the component node.
	 *
	 * @param pagePath         - the path to the data page
	 * @param resourceResolver - resource resolver object
	 * @param resourceType     - resource type
	 * @return the path to the component node on the page.
	 * @throws NullPointerException generated by listChildren method invocation
	 */
	public static String getComponentNode(String pagePath, ResourceResolver resourceResolver, String resourceType) {
		String nodePath = StringUtils.EMPTY;
		if (StringUtils.isNotEmpty(pagePath) && null != resourceResolver) {
			Resource pageContentResource = resourceResolver.getResource(pagePath.concat(JCR_ROOT));
			if (pageContentResource != null) {
				Iterator<Resource> children = pageContentResource.listChildren();
				while (children.hasNext()) {
					Resource child = children.next();
					if (child.isResourceType(resourceType)) {
						nodePath = child.getPath();
						break;
					}
				}
			}
		}
		return nodePath;
	}

	/**
	 * Creates and returns an instance of IndustryRoleInterestModelConfig from the
	 * Area of Focus Model.
	 *
	 * @param aofModel - Area of Field Model
	 * @return - Instance of IndustryRoleInterestModelConfig
	 */
	private static IndustryRoleInterestModelConfig createIRIModelConfig(AreaOfFocusModel aofModel) {

		IndustryRoleInterestModelConfig iriLabelConfig = new IndustryRoleInterestModelConfig(
				aofModel.getIndustryTitle(), aofModel.getIndustryDescription(), aofModel.getIndustrySelectionText(),
				aofModel.getRoleTitle(), aofModel.getRoleDescription(), aofModel.getRoleSelectionText(),
				aofModel.getInterestTitle(), aofModel.getInterestDescription(), aofModel.getInterestSelectionText(),
				aofModel.getNextIndustryButtonLabel(), aofModel.getSkipIndustryLinkLabel(),
				aofModel.getBackRoleButtonLabel(), aofModel.getNextRoleButtonLabel(),
				aofModel.getBackInterestButtonLabel(), aofModel.getNextInterestButtonLabel(),
				aofModel.getIndustryList());
		return iriLabelConfig;
	}

	/**
	 * Gets the area of focus config.
	 *
	 * @param pagePath         - The path to the data page
	 * @param resourceResolver - Resource resolver object
	 * @param resourceType     - Resource type
	 * @return - Area of Focus Labels
	 */
	public static String getAreaOfFocusLabel(String pagePath, ResourceResolver resourceResolver, String resourceType) {

		String aoFLabels = StringUtils.EMPTY;

		AreaOfFocusModel aofModel = getAreaOfFocusModel(pagePath, resourceResolver, resourceType);
		if (aofModel != null) {

			ExcludeUtil excludeUtilObject = new ExcludeUtil();

			IndustryRoleInterestModelConfig iRIModelConfig = createIRIModelConfig(aofModel);
			Gson iriJson = new GsonBuilder().addDeserializationExclusionStrategy(excludeUtilObject)
					.addSerializationExclusionStrategy(excludeUtilObject).create();
			if (iRIModelConfig != null) {
				aoFLabels = iriJson.toJson(iRIModelConfig);
			}
		}
		return aoFLabels;
	}

	public static String getAreaFocusConfigurationJson(ExcludeUtil excludeUtilObject,
														BDBApiEndpointService bdbApiEndpointService,
														String hybrisSiteId){

		String areaFocusConfig = StringUtils.EMPTY;
		String signUpPreferenceEndpoint = StringUtils.replace(
				bdbApiEndpointService.getHybrisSignUpPreferenceEndpoint(),
				CommonConstants.HYBRIS_SITE_LITERAL,
				hybrisSiteId);
		Payload areaFocusPayload = new Payload(bdbApiEndpointService.getBDBHybrisDomain()
				+ signUpPreferenceEndpoint, HttpConstants.METHOD_POST);
		Gson areaFocusGson = new GsonBuilder().addDeserializationExclusionStrategy(excludeUtilObject)
				.addSerializationExclusionStrategy(excludeUtilObject).create();
		if (areaFocusPayload != null) {
			PayloadConfig areaFocusConfigModel = new PayloadConfig(areaFocusPayload);
			areaFocusConfig = areaFocusGson.toJson(areaFocusConfigModel);
		}
		return areaFocusConfig;
	}

}